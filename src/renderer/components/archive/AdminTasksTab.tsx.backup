import React, { useState, useEffect } from 'react';
import { 
  Card, 
  Row, 
  Col, 
  Statistic, 
  Table, 
  Button, 
  Space, 
  Tag, 
  Tooltip, 
  Progress, 
  Typography, 
  message,
  Modal,
  notification,
  Empty,
  Spin,
  Alert
} from 'antd';
import { 
  PlayCircleOutlined, 
  StopOutlined, 
  DeleteOutlined, 
  ReloadOutlined,
  CheckCircleOutlined,
  ExclamationCircleOutlined,
  ClockCircleOutlined,
  BarChartOutlined,
  ClearOutlined,
  ThunderboltOutlined
} from '@ant-design/icons';
import { useTranslation } from 'react-i18next';
import apiClient from '../services/apiClient';

const { Title, Text } = Typography;
const { confirm } = Modal;

interface Task {
  id: string;
  status: 'pending' | 'processing' | 'completed' | 'failed' | 'parsed';
  task_type: string;
  progress: number;
  error_message?: string;
  created_at: string;
  started_at?: string;
  completed_at?: string;
  result_data?: any;
}

interface TaskStats {
  total_tasks: number;
  running_tasks: number;
  queued_tasks: number;
  completed_tasks: number;
  failed_tasks: number;
}

interface WorkerStatus {
  pool_size: number;
  active_workers: number;
  idle_workers: number;
  queue_size: number;
  worker_utilization: number;
  system_healthy: boolean;
}

interface TasksTabProps {
  apiKey: string;
}

const TasksTab: React.FC<TasksTabProps> = ({ apiKey }) => {
  const { t } = useTranslation(['tasks', 'common']);
  
  const [tasks, setTasks] = useState<Task[]>([]);
  const [activeTasks, setActiveTasks] = useState<Task[]>([]);
  const [taskStats, setTaskStats] = useState<TaskStats | null>(null);
  const [workerStatus, setWorkerStatus] = useState<WorkerStatus | null>(null);
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);

  // Auto-refresh active tasks every 2 seconds
  useEffect(() => {
    if (!apiKey) return;
    
    loadAllData();
    
    const interval = setInterval(() => {
      loadActiveTasks();
    }, 2000);
    
    return () => clearInterval(interval);
  }, [apiKey]);

  const loadAllData = async () => {
    if (!apiKey) return;
    
    try {
      setLoading(true);
      await Promise.all([
        loadTasks(),
        loadActiveTasks(),
        loadTaskStats(),
        loadWorkerStatus()
      ]);
    } catch (error) {
      console.error('Error loading task data:', error);
      message.error('Failed to load task data');
    } finally {
      setLoading(false);
    }
  };

  const loadTasks = async () => {
    try {
      const response = await apiClient.getTaskHistory({ hours: 24 });
      setTasks(response.data.history || []);
    } catch (error) {
      console.error('Error loading tasks:', error);
    }
  };

  const loadActiveTasks = async () => {
    try {
      const response = await apiClient.getActiveTasks();
      setActiveTasks(response.data.active_tasks || []);
    } catch (error) {
      console.error('Error loading active tasks:', error);
    }
  };

  const loadTaskStats = async () => {
    try {
      const response = await apiClient.getTaskDashboard();
      setTaskStats(response.data.user_stats);
    } catch (error) {
      console.error('Error loading task stats:', error);
    }
  };

  const loadWorkerStatus = async () => {
    try {
      const response = await apiClient.getWorkerStatus();
      setWorkerStatus(response.data.worker_pool);
    } catch (error) {
      console.error('Error loading worker status:', error);
    }
  };

  const handleRefresh = async () => {
    setRefreshing(true);
    await loadAllData();
    setRefreshing(false);
    message.success('Task data refreshed');
  };

  const handleStopTask = async (taskId: string) => {
    try {
      await apiClient.stopTask(taskId);
      message.success('Task stopped successfully');
      await loadAllData();
    } catch (error: any) {
      message.error(`Failed to stop task: ${error.message}`);
    }
  };

  const handleCleanFinishedTasks = () => {
    confirm({
      title: 'Clean Finished Tasks',
      content: 'This will remove all completed and failed tasks from the system. Active tasks will not be affected.',
      icon: <ClearOutlined />,
      okText: 'Clean Tasks',
      cancelText: 'Cancel',
      onOk: async () => {
        try {
          await apiClient.cleanFinishedTasks();
          notification.success({
            message: 'Tasks Cleaned',
            description: 'All finished tasks have been removed from the system.',
            placement: 'bottomRight'
          });
          await loadAllData();
        } catch (error: any) {
          message.error(`Failed to clean tasks: ${error.message}`);
        }
      }
    });
  };

  const handleAdjustWorkers = async (newCount: number) => {
    try {
      await apiClient.adjustWorkerCount(newCount);
      message.success(`Worker pool adjusted to ${newCount} workers`);
      await loadWorkerStatus();
    } catch (error: any) {
      message.error(`Failed to adjust workers: ${error.message}`);
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed': return 'success';
      case 'failed': return 'error';
      case 'processing': return 'processing';
      case 'pending': return 'warning';
      default: return 'default';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'completed': return <CheckCircleOutlined />;
      case 'failed': return <ExclamationCircleOutlined />;
      case 'processing': return <PlayCircleOutlined />;
      case 'pending': return <ClockCircleOutlined />;
      default: return null;
    }
  };

  const formatTaskType = (taskType: string) => {
    return taskType.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
  };

  const taskColumns = [
    {
      title: 'Task ID',
      dataIndex: 'id',
      key: 'id',
      width: 280,
      render: (id: string) => (
        <Text code style={{ fontSize: '11px' }}>{id}</Text>
      )
    },
    {
      title: 'Type',
      dataIndex: 'task_type',
      key: 'task_type',
      width: 180,
      render: (type: string) => (
        <Tag color="blue">{formatTaskType(type)}</Tag>
      )
    },
    {
      title: 'Status',
      dataIndex: 'status',
      key: 'status',
      width: 120,
      render: (status: string) => (
        <Tag color={getStatusColor(status)} icon={getStatusIcon(status)}>
          {status.toUpperCase()}
        </Tag>
      )
    },
    {
      title: 'Progress',
      dataIndex: 'progress',
      key: 'progress',
      width: 120,
      render: (progress: number, record: Task) => (
        record.status === 'processing' ? (
          <Progress percent={Math.round(progress)} size="small" />
        ) : (
          <span>-</span>
        )
      )
    },
    {
      title: 'Created',
      dataIndex: 'created_at',
      key: 'created_at',
      width: 160,
      render: (date: string) => new Date(date).toLocaleString()
    },
    {
      title: 'Actions',
      key: 'actions',
      width: 100,
      render: (_: any, record: Task) => (
        <Space>
          {record.status === 'processing' && (
            <Tooltip title="Stop Task">
              <Button
                size="small"
                type="text"
                danger
                icon={<StopOutlined />}
                onClick={() => handleStopTask(record.id)}
              />
            </Tooltip>
          )}
        </Space>
      )
    }
  ];

  if (loading) {
    return (
      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '400px' }}>
        <Spin size="large" />
      </div>
    );
  }

  return (
    <div style={{ padding: '24px' }}>
      {/* Header */}
      <div style={{ marginBottom: '24px', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
        <Title level={2} style={{ margin: 0 }}>
          <BarChartOutlined style={{ marginRight: '8px', color: '#8b5cf6' }} />
          Task Management Center
        </Title>
        <Space>
          <Button 
            icon={<ClearOutlined />} 
            onClick={handleCleanFinishedTasks}
            type="primary"
            ghost
          >
            Clean Finished Tasks
          </Button>
          <Button 
            icon={<ReloadOutlined spin={refreshing} />} 
            onClick={handleRefresh}
            loading={refreshing}
          >
            Refresh
          </Button>
        </Space>
      </div>

      {/* Stats Cards */}
      <Row gutter={[16, 16]} style={{ marginBottom: '24px' }}>
        <Col xs={24} sm={12} lg={6}>
          <Card>
            <Statistic
              title="Total Tasks"
              value={taskStats?.total_tasks || 0}
              prefix={<BarChartOutlined />}
              valueStyle={{ color: '#8b5cf6' }}
            />
          </Card>
        </Col>
        <Col xs={24} sm={12} lg={6}>
          <Card>
            <Statistic
              title="Running"
              value={taskStats?.running_tasks || 0}
              prefix={<PlayCircleOutlined />}
              valueStyle={{ color: '#10b981' }}
            />
          </Card>
        </Col>
        <Col xs={24} sm={12} lg={6}>
          <Card>
            <Statistic
              title="Queued"
              value={taskStats?.queued_tasks || 0}
              prefix={<ClockCircleOutlined />}
              valueStyle={{ color: '#f59e0b' }}
            />
          </Card>
        </Col>
        <Col xs={24} sm={12} lg={6}>
          <Card>
            <Statistic
              title="Completed"
              value={taskStats?.completed_tasks || 0}
              prefix={<CheckCircleOutlined />}
              valueStyle={{ color: '#10b981' }}
            />
          </Card>
        </Col>
      </Row>

      {/* Worker Status */}
      {workerStatus && (
        <Card title="System Status" style={{ marginBottom: '24px' }}>
          <Row gutter={[16, 16]}>
            <Col xs={24} md={12}>
              <div style={{ display: 'flex', alignItems: 'center', marginBottom: '12px' }}>
                <ThunderboltOutlined style={{ color: '#8b5cf6', marginRight: '8px' }} />
                <Text strong>Worker Pool: {workerStatus.active_workers}/{workerStatus.pool_size} active</Text>
              </div>
              <Progress 
                percent={Math.round(workerStatus.worker_utilization)} 
                status={workerStatus.system_healthy ? 'normal' : 'exception'}
                strokeColor="#8b5cf6"
              />
            </Col>
            <Col xs={24} md={12}>
              <Space direction="vertical" style={{ width: '100%' }}>
                <div>Queue Size: <Tag color="blue">{workerStatus.queue_size}</Tag></div>
                <div>Idle Workers: <Tag color="green">{workerStatus.idle_workers}</Tag></div>
                <Space>
                  <Button size="small" onClick={() => handleAdjustWorkers(8)}>8 Workers</Button>
                  <Button size="small" onClick={() => handleAdjustWorkers(12)}>12 Workers</Button>
                  <Button size="small" onClick={() => handleAdjustWorkers(16)}>16 Workers</Button>
                </Space>
              </Space>
            </Col>
          </Row>
        </Card>
      )}

      {/* Active Tasks */}
      {activeTasks.length > 0 && (
        <Card title="Active Tasks" style={{ marginBottom: '24px' }}>
          <Alert
            message="Real-time Updates"
            description="Active tasks are updated every 2 seconds automatically."
            type="info"
            showIcon
            style={{ marginBottom: '16px' }}
          />
          <Table
            dataSource={activeTasks}
            columns={taskColumns}
            rowKey="id"
            pagination={false}
            size="small"
          />
        </Card>
      )}

      {/* Task History */}
      <Card title="Task History (Last 24 Hours)">
        {tasks.length === 0 ? (
          <Empty 
            description="No tasks found"
            image={Empty.PRESENTED_IMAGE_SIMPLE}
          />
        ) : (
          <Table
            dataSource={tasks}
            columns={taskColumns}
            rowKey="id"
            pagination={{
              pageSize: 10,
              showSizeChanger: true,
              showQuickJumper: true,
              showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} tasks`
            }}
            size="small"
          />
        )}
      </Card>
    </div>
  );
};

export default TasksTab;